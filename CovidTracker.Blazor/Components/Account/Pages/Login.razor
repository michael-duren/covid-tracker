@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using CovidTracker.Blazor.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="flex items-center justify-center flex-col min-h-[80vh] bg-base-200">
    <h1 class="text-5xl font-bold mb-16">Log in</h1>
    <section class="w-1/2">
        <StatusMessage Message="@errorMessage"/>
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator/>
            <h2 class="text-2xl mb-8 font-semibold">Use a local account to log in.</h2>
            <hr/>
            @* <ValidationSummary class="text-red-500" role="alert"/> *@
            <div class="flex flex-col gap-8">
                <label for="email" class="input input-bordered flex items-center gap-2">
                    Email
                    <InputText @bind-Value="Input.Email" class="grow" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
                    <ValidationMessage For="() => Input.Email" class="text-red-500"/>
                </label>
                <label for="password" class="input input-bordered flex items-center gap-2">
                    Password
                    <InputText type="password" @bind-Value="Input.Password" class="grow" autocomplete="current-password" aria-required="true" placeholder="password"/>
                    <ValidationMessage For="() => Input.Password" class="text-red-500"/>
                </label>
            </div>
            <div class="flex gap-8 w-full justify-between my-8">
                <label class="flex gap-2">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="checkbox"/>
                    <div class="font-semibold">
                        Remember me
                    </div>
                </label>
                <button type="submit" class="btn btn-primary">Log in</button>
            </div>
            <div class="flex w-full mt-8 justify-between">
                <p class="font-semibold">
                    <a href="Account/ForgotPassword">Forgot your password?</a>
                </p>
                <p class="font-semibold">
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                </p>
                <p class="font-semibold">
                    <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                </p>
            </div>
        </EditForm>
    </section>
    @* <div class="col-md-6 col-md-offset-2"> *@
    @*     <section> *@
    @*         <h3>Use another service to log in.</h3> *@
    @*         <hr/> *@
    @*         <ExternalLoginPicker/> *@
    @*     </section> *@
    @* </div> *@
</div>

@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")] public bool RememberMe { get; set; }
    }

}